from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram import F, types
from aiogram import Router

from infrastructure.database.db_working import UserWorking
from infrastructure.neuro.gpt.chat_gpt import gpt_answer
from tgbot.keyboards.reply.end_gpt_dialog_kb import end_dialog
from tgbot.keyboards.reply.profile_kb import main_user_profile

router = Router()
router.message.filter(
    F.chat.type == "private"
)


class Dialog(StatesGroup):
    start_gpt = State()


@router.message(F.text == "üìù–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")
async def with_puree(message: types.Message, state: FSMContext):
    await state.update_data(messages=[])
    text = """–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç!

–ß—Ç–æ–±—ã –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üëãüèª –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /end.

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"""
    kb = [
        [types.KeyboardButton(text="üëãüèª –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.answer(text=text, reply_markup=keyboard)
    await state.set_state(Dialog.start_gpt)


@router.message(F.text == "üëãüèª –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")
@router.message(Command('end'))
async def with_puree(message: types.Message, state: FSMContext):
    kb = [
        [types.KeyboardButton(text="üìù–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–µ–Ω!", reply_markup=main_user_profile())
    await state.clear()


@router.message(Dialog.start_gpt)
async def question_gpt(message: types.Message, state: FSMContext):
    user = await UserWorking.get_user(message.from_user.id)

    if await UserWorking.attempt_gpt_minus(message.from_user.id) >= 0 or user.subscribe:
        user_data = await state.get_data()
        msg = await message.answer(text='–ù–∞–≤–æ–∂—É –º–∞–≥–∏—é, —Å–µ–∫—É–Ω–¥—É ü™Ñ')
        user_data["messages"].append(
            {
                "role": "user",
                "content": message.text.lower(),
            })
        bot_message = gpt_answer(user_data["messages"])

        await message.bot.edit_message_text(text=bot_message, chat_id=message.chat.id, message_id=msg.message_id)
        user_data["messages"].append(
            {
                "role": "bot",
                "content": bot_message,
            })
        await state.update_data(messages=user_data["messages"])
    else:
        await message.answer(text='–ß—Ç–æ–±—ã –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤—Ç–∞—å—Å—è —á–∞—Ç–æ–º –Ω–∞–¥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!',
                             reply_markup=end_dialog())
