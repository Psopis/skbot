from aiogram import Router, F

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.deep_linking import create_start_link

from infrastructure.database.db_working import UserWorking
from infrastructure.yokassa import create_payment, check_payment
from tgbot.keyboards.inline.main_profile.details_kb import profile_dop_section
from tgbot.keyboards.inline.main_profile.subscribes.subscribes_kb import profile_subscribes
from tgbot.keyboards.inline.subscrbe_check_kb import money_set
from tgbot.keyboards.reply.profile_kb import main_user_profile
from tgbot.keyboards.reply.promo_cancel import cancel_subscribes

dop_router = Router()


async def referral_money_set(user_id, balance):
    user = await UserWorking.get_user(user_id)

    if user.referred_by:
        await UserWorking.set_referred(user_id=user_id)
        await UserWorking.set_referral_balance(user.referred_by_id, balance=balance * 0.1)



class states(StatesGroup):
    generation_photo = State()
    money_set = State()


@dop_router.callback_query(F.data == '_Subscribe')
async def choosing_neuro_to_txtimg(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω',
                                 reply_markup=profile_subscribes())


@dop_router.callback_query(F.data.contains('monthSub'))
async def choosing_neuro_to_txtimg(call: CallbackQuery, state: FSMContext):
    data = call.data.split('_')[1]

    if data == '1':
        payment = create_payment(150)
        await call.message.delete()
        await call.message.answer(text='''*–¢–∞—Ä–∏—Ñ:* –Ω–∞ 1 –º–µ—Å—è—Ü
*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 150 üá∑üá∫RUB
*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* 30 –¥–Ω–µ–π
        
*–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:*
- GPT —á–∞—Ç-–±–æ—Ç
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        ''',
                                  reply_markup=money_set(payment), parse_mode='Markdown')

    elif data == '3':
        payment = create_payment(400)
        await call.message.delete()
        await call.message.answer(text='''*–¢–∞—Ä–∏—Ñ:* –Ω–∞ 3 –º–µ—Å—è—Ü–∞
*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 400 üá∑üá∫RUB
*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* 90 –¥–Ω–µ–π
        
*–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:*
- GPT —á–∞—Ç-–±–æ—Ç
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        ''',
                                  reply_markup=money_set(payment), parse_mode='Markdown')

    elif data == '12':
        payment = create_payment(1000)

        await call.message.delete()
        await call.message.answer(text='''*–¢–∞—Ä–∏—Ñ:* –Ω–∞ 1 –≥–æ–¥
*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1000 üá∑üá∫RUB
*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* 365 –¥–Ω–µ–π

*–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:*
- GPT —á–∞—Ç-–±–æ—Ç
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        ''',
                                  reply_markup=money_set(payment), parse_mode='Markdown')


@dop_router.callback_query(F.data.contains('check_payment'))
async def check_paymentss__(call: CallbackQuery, state: FSMContext):
    payment_id = call.data.split('_')[2]
    value = float(call.data.split('_')[3])
    result = check_payment(payment_id=payment_id)

    print(result)
    if not result:
        await call.answer(text='–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞')
    else:
        await referral_money_set(user_id=call.from_user.id, balance=value)

        days = 0
        match int(value):
            case 150:
                days = 30
            case 400:
                days = 90
            case 1000:
                days = 365

        await UserWorking.set_subscribe_true(call.from_user.id, days)
        await call.message.edit_text('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')


@dop_router.callback_query(F.data == 'cancel_payment')
async def cancel_pament___(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω',
                                 reply_markup=profile_subscribes())


@dop_router.message(F.text == '‚ùå–û—Ç–º–µ–Ω—Ç—å')
async def set_promocode(message: Message, state: FSMContext):
    await message.answer(text=f'–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_user_profile())

    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω',
                         reply_markup=profile_subscribes())


@dop_router.callback_query(F.data == 'back_in_profile')
async def back_button(call: CallbackQuery):
    await call.answer()
    user = await UserWorking.get_user(call.from_user.id)

    start_link = await create_start_link(call.bot, str(call.from_user.id))
    t = f'*–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏:* {user.date}\n' if user.date else ""
    text = f"""     üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å* `{user.username}`\n
*–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{user.user_id}`\n
    
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
{t}
*–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:* `{user.referral_balance}`
    
*–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:* \n`{start_link}`
                    """
    await call.message.edit_text(text=text, parse_mode="Markdown",
                                 reply_markup=profile_dop_section())
